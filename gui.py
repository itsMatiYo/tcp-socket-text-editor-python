# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from os import error
from pathlib import Path
import threading, socket
from tkinter import *
from comp import CustomText
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


HOST, PORT = '127.0.0.1', 65432

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect((HOST, PORT))


# entry 1 = txt
# entry 2 = logs
# entry 3 = name field
# ! end of functions
class GUI:
    def __init__(self):
        self.window = Tk()

        self.window.geometry("740x607")
        self.window.configure(bg="#1F1F1F")

        self.canvas1 = Canvas(
            self.window,
            bg="#1F1F1F",
            height=607,
            width=740,
            bd=0,
            highlightthickness=0,
            relief="ridge",
        )

        self.canvas1.place(x=0, y=0)
        self.entry_image_1 = PhotoImage(file=relative_to_assets("entry_1.png"))
        self.entry_bg_1 = self.canvas1.create_image(209.0,
                                                    337.0,
                                                    image=self.entry_image_1)
        self.entry_1 = CustomText(
            bd=0,
            bg="#C4C4C4",
            highlightthickness=0,
            font=("Calibri 24"),
        )
        self.entry_1.bind("<<TextModified>>", self.onModification)
        self.entry_1.place(x=28.0, y=95.0, width=362.0, height=482.0)

        self.entry_image_2 = PhotoImage(file=relative_to_assets("entry_2.png"))
        self.entry_bg_2 = self.canvas1.create_image(569.0,
                                                    337.0,
                                                    image=self.entry_image_2)
        self.entry_2 = Text(bd=0, bg="#C4C4C4", highlightthickness=0)
        self.entry_2.place(x=429.0, y=95.0, width=280.0, height=482.0)

        self.entry_image_3 = PhotoImage(file=relative_to_assets("entry_3.png"))
        self.entry_bg_3 = self.canvas1.create_image(269.5,
                                                    41.0,
                                                    image=self.entry_image_3)
        self.entry_3 = Entry(
            bd=0,
            bg="#E7E7E7",
            highlightthickness=0,
            font=("Calibri 24"),
        )
        self.entry_3.place(x=159.0, y=15.0, width=221.0, height=50.0)

        self.canvas1.create_text(28.0,
                                 24.0,
                                 anchor="nw",
                                 text="Name:\n",
                                 fill="#FFFFFF",
                                 font=("Roboto", 24 * -1))
        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        # send name button
        self.button_1 = Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.sign_name(self.entry_3.get()),
            relief="flat")
        self.button_1.place(x=487.0,
                            y=15.0,
                            width=180.890625,
                            height=51.8360595703125)
        self.window.resizable(False, False)
        self.window.mainloop()

    def onModification(self, event):
        chars = event.widget.get("1.0", "end-1c")
        self.send_data(f'edit:{chars}')

    def sign_name(self, name):
        # the thread to receive messages
        rcv = threading.Thread(target=self.receive)
        rcv.start()
        self.send_data(f'name:{name}')

    # recieving data
    def receive(self):
        while True:
            try:
                message = client.recv(2048).decode()
                # handling incoming data
                if message.startswith('txt:'):
                    message = message[4:]
                    # self.entry_1.delete('1.0', END)
                    self.entry_1.replace('1.0', END, message)
                else:
                    message = '\n' + message
                    self.entry_2.insert(END, message)
            except error as e:
                print(e)
                # an error will be printed on the command line or console if there's an error
                print("An error occured!")
                client.close()
                break

    def send_data(self, message):
        while True:
            client.send(message.encode())
            break


g = GUI()
